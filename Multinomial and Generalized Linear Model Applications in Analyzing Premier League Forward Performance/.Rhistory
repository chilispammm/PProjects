knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(corrplot)
library(dplyr)
library(ggplot2)
PL_shooting <- read_excel("C:/Users/Admin/Downloads/23_24 PL Shooting Data.xlsx")
head(PL_shooting)
str(PL_shooting) # Structure of data
# Select numeric columns (for correlation analysis)
library(lares)
numerical_vars1 <- sapply(PL_shooting, is.numeric)
numeric_data1 <- PL_shooting[, numerical_vars1]
correlation_matrix1 <- cor(numeric_data1)
corrplot(correlation_matrix1)
corr_cross(PL_shooting, max_pvalue = 0.05, top = 15, grid = TRUE)
### Correlation with goals
# Calculate correlations between each numeric variable and GF
cor_with_GF <- sapply(numeric_data1,
function(x) cor(x, PL_shooting$Gls,
use = "complete.obs"))
# Convert the results to a data frame
cor_with_GF_df <- data.frame(
Variable = names(cor_with_GF),
Correlation = cor_with_GF
)
# Sort the data frame by the absolute value of correlation in descending order
cor_with_GF_df <- cor_with_GF_df %>%
arrange(desc(abs(Correlation)))
# Create a bar plot
ggplot(cor_with_GF_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() + # Flip coordinates for better readability
labs(title = "Correlation with Goals (Gls)", x = "Variable", y = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Assigning labels of Forward ability based on some criteria
PL_shooting <- PL_shooting %>%
mutate(
Forward_Ability = case_when(
Gls >= 15 ~ "Elite",
Gls >= 10 & Gls < 15 ~ "Leading",
TRUE ~ "Good"
)
)
# Convert Forward_Ability to a factor
PL_shooting$Forward_Ability <- factor(PL_shooting$Forward_Ability,
levels = c("Good", "Leading", "Elite"))
# Fit the multinomial logistic regression model
library(nnet)
mult_model <- multinom(Forward_Ability ~ Age + `90s` + Gls + Sh + SoT + `Sh/90` + `SoT/90` +
Dist + xG, data = PL_shooting)
summary(mult_model)
# Fit Poisson regression model
poisson_model <- glm(Gls ~ Age + `90s` + Sh + SoT + `SoT%` + `Sh/90` + `SoT/90` + Dist + PK +
PKatt + xG + npxG, family = poisson, data = PL_shooting)
summary(poisson_model)
# Assumptions and diagnostics
# Check for overdispersion
dispersion_test <- sum(residuals(poisson_model,
type = "pearson")^2) / df.residual(poisson_model)
print(dispersion_test)
library(lmtest)
dwtest(poisson_model)
# Polynomial regression model
poly_model <- lm(Gls ~ poly(Age, 2, raw=TRUE),
data=PL_shooting)
summary(poly_model)
# Plot the data and the model
ggplot(PL_shooting, aes(x=Age, y=Gls)) +
geom_point() +
stat_smooth(method="lm",
formula=y~poly(x, 2, raw=TRUE),
col="blue") +
labs(title="Polynomial Regression: Age vs Goals",
x="Age", y="Goals")
# Generate synthetic data
set.seed(333)
Club <- rep(c("Pescara", "Assisi", "Rome", "Lucca"), each = 5)
Season <- rep(1:5, times = 4)
Performance <- round(rnorm(20, 70, 5))
synthetic_data <- data.frame(Club, Season, Performance)
synthetic_data
library(plm)
fixed_effects_model <- plm(Performance ~ Season, data = synthetic_data,
index = c("Club", "Season"), model = "within")
summary(fixed_effects_model)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(corrplot)
library(dplyr)
library(ggplot2)
PL_shooting <- read_excel("C:/Users/Admin/Downloads/23_24 PL Shooting Data.xlsx")
head(PL_shooting)
library(readxl)
library(tidyr)
library(corrplot)
library(dplyr)
library(ggplot2)
PL_shooting <- read_excel("C:/Users/Admin/Downloads/23_24 PL Shooting Data.xlsx")
head(PL_shooting)
library(readxl)
library(tidyr)
library(corrplot)
library(dplyr)
library(ggplot2)
PL_shooting <- read_excel("files/23_24 PL Shooting Data.xlsx")
head(PL_shooting)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(corrplot)
library(dplyr)
library(ggplot2)
PL_shooting <- read_excel("files/23_24 PL Shooting Data.xlsx")
head(PL_shooting)
str(PL_shooting) # Structure of data
# Select numeric columns (for correlation analysis)
library(lares)
numerical_vars1 <- sapply(PL_shooting, is.numeric)
numeric_data1 <- PL_shooting[, numerical_vars1]
correlation_matrix1 <- cor(numeric_data1)
corrplot(correlation_matrix1)
corr_cross(PL_shooting, max_pvalue = 0.05, top = 15, grid = TRUE)
### Correlation with goals
# Calculate correlations between each numeric variable and GF
cor_with_GF <- sapply(numeric_data1,
function(x) cor(x, PL_shooting$Gls,
use = "complete.obs"))
# Convert the results to a data frame
cor_with_GF_df <- data.frame(
Variable = names(cor_with_GF),
Correlation = cor_with_GF
)
# Sort the data frame by the absolute value of correlation in descending order
cor_with_GF_df <- cor_with_GF_df %>%
arrange(desc(abs(Correlation)))
# Create a bar plot
ggplot(cor_with_GF_df, aes(x = reorder(Variable, Correlation), y = Correlation)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() + # Flip coordinates for better readability
labs(title = "Correlation with Goals (Gls)", x = "Variable", y = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Assigning labels of Forward ability based on some criteria
PL_shooting <- PL_shooting %>%
mutate(
Forward_Ability = case_when(
Gls >= 15 ~ "Elite",
Gls >= 10 & Gls < 15 ~ "Leading",
TRUE ~ "Good"
)
)
# Convert Forward_Ability to a factor
PL_shooting$Forward_Ability <- factor(PL_shooting$Forward_Ability,
levels = c("Good", "Leading", "Elite"))
# Fit the multinomial logistic regression model
library(nnet)
mult_model <- multinom(Forward_Ability ~ Age + `90s` + Gls + Sh + SoT + `Sh/90` + `SoT/90` +
Dist + xG, data = PL_shooting)
summary(mult_model)
# Fit Poisson regression model
poisson_model <- glm(Gls ~ Age + `90s` + Sh + SoT + `SoT%` + `Sh/90` + `SoT/90` + Dist + PK +
PKatt + xG + npxG, family = poisson, data = PL_shooting)
summary(poisson_model)
# Assumptions and diagnostics
# Check for overdispersion
dispersion_test <- sum(residuals(poisson_model,
type = "pearson")^2) / df.residual(poisson_model)
print(dispersion_test)
library(lmtest)
dwtest(poisson_model)
# Polynomial regression model
poly_model <- lm(Gls ~ poly(Age, 2, raw=TRUE),
data=PL_shooting)
summary(poly_model)
# Plot the data and the model
ggplot(PL_shooting, aes(x=Age, y=Gls)) +
geom_point() +
stat_smooth(method="lm",
formula=y~poly(x, 2, raw=TRUE),
col="blue") +
labs(title="Polynomial Regression: Age vs Goals",
x="Age", y="Goals")
# Generate synthetic data
set.seed(333)
Club <- rep(c("Pescara", "Assisi", "Rome", "Lucca"), each = 5)
Season <- rep(1:5, times = 4)
Performance <- round(rnorm(20, 70, 5))
synthetic_data <- data.frame(Club, Season, Performance)
synthetic_data
library(plm)
fixed_effects_model <- plm(Performance ~ Season, data = synthetic_data,
index = c("Club", "Season"), model = "within")
summary(fixed_effects_model)
library(readxl)
MUFC_23_24_Passing_Data_Cleaned <- read_excel("C:/Users/Admin/Downloads/MUFC 23_24 Passing Data Cleaned.xlsx")
View(MUFC_23_24_Passing_Data_Cleaned)
knitr::opts_chunk$set(echo = TRUE)
# Loading our data
library(readxl)
mufc_data <- read_excel("C:/Users/Admin/Downloads/MUFC 23_24 Passing Data Cleaned.xlsx")
head(mufc_data)
str(mufc_data)
# Loading our data
# Loading required libraries
library(dplyr) # for data manipulation
library(ggplot2) # for visualization
library(MASS) # for Negative Binomial model
library(lme4) # for Linear Mixed-Effects Models
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
knitr::opts_chunk$set(echo = TRUE)
# Loading our data
# Loading required libraries
library(dplyr) # for data manipulation
library(ggplot2) # for visualization
library(MASS) # for Negative Binomial model
library(lme4) # for Linear Mixed-Effects Models
library(dendextend) # for hierarchical clustering
library(readxl) # for reading the excel data
mufc_data <- read_excel("C:/Users/Admin/Downloads/MUFC 23_24 Passing Data Cleaned.xlsx")
head(mufc_data)
# Loading our data
# Loading required libraries
library(dplyr) # for data manipulation
library(ggplot2) # for visualization
library(MASS) # for Negative Binomial model
library(lme4) # for Linear Mixed-Effects Models
library(dendextend) # for hierarchical clustering
library(readxl) # for reading the excel data
mufc_data <- read_excel("C:/Users/Admin/Downloads/MUFC 23_24 Passing Data Cleaned.xlsx")
head(mufc_data)
# Clean and convert data types
data = mufc_data
data_cleaned <- data %>%
# Convert Date to Date type
mutate(Date = as.Date(Date)) %>%
# Convert categorical variables to factors
mutate(Round = as.factor(Round),
Day = as.factor(Day),
Venue = as.factor(Venue),
Result = as.factor(Result),
Opponent = as.factor(Opponent))
# Inspect the cleaned data
str(data_cleaned)
summary(data_cleaned)
# 1. Goals For by Round
ggplot(data_cleaned, aes(x = Round, y = GF)) +
geom_bar(stat = "identity", fill = 'red') +
labs(title = "Goals Against by Round", x = "Round", y = "Goals Against") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# 1. Goals For by Round
ggplot(data_cleaned, aes(x = Round, y = GF)) +
geom_bar(stat = "identity", fill = 'red') +
labs(title = "Goals Against by Round", x = "Round", y = "Goals Against") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# 1. Goals For by Round
library(ggplot2)
ggplot(data_cleaned, aes(x = Round, y = GF)) +
geom_bar(stat = "identity", fill = 'red') +
labs(title = "Goals Against by Round", x = "Round", y = "Goals Against") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# 1. Goals For by Round
library(ggplot2) #data viz
# 1. Goals For by Round
ggplot(data_cleaned, aes(x = Round, y = GF)) +
geom_bar(stat = "identity", fill = 'red') +
labs(title = "Goals Against by Round", x = "Round", y = "Goals Against") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# 1. Goals For by Round
library(ggplot2) #data viz
# 1. Goals For by Round
ggplot(data_cleaned, aes(x = Round, y = GF)) +
geom_bar(stat = "identity", fill = 'red') +
labs(title = "Goals Against by Round", x = "Round", y = "Goals Against") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
# 1. Goals For by Round
ggplot(data_cleaned, aes(x = as.factor(Round), y = GF)) + # Convert Round to factor for discrete categories
geom_bar(stat = "identity", fill = 'red') +
labs(title = "Goals For by Round",
x = "Round",
y = "Goals For") + # Corrected y-axis label
theme_minimal() + # A cleaner theme
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5)) # Center the plot title
getwd()
